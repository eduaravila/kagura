---
import PostLayout from "@/layouts/BlogPost";
import type { GetStaticPathsResult } from "astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { fallbackLanguage } from "i18n";
import { getLocaleFromPostId,getNonDraftPosts } from "src/utils/post";

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
	let allPosts: CollectionEntry<"post">[] = await getCollection("post");
	allPosts = getNonDraftPosts(allPosts);

  const allLocalesPerPost = allPosts.reduce((prev,post)=> {
    const locale = getLocaleFromPostId(post.id);
    const slug = post.slug.split("/")[0];
    return {...prev, [slug]:[...prev[slug] || [], locale]}
  },{} as {[key:string]:string[]})

	const allPaths = allPosts.map(({ id, slug, ...post }) => {
		slug = slug.split("/")[0];
		return {
			params: {
				post: slug,
				locale: getLocaleFromPostId(id),
			},
			props: {
        locales: allLocalesPerPost[slug].filter((locale)=>locale !== getLocaleFromPostId(id)),
				post,
			},
		};
	});


	const fallbackPaths = allPosts
		.filter(({ id }) => getLocaleFromPostId(id) === fallbackLanguage)
		.map(({ id, slug, ...post }) => {
			return {
				params: {
					post: slug,
					locale: undefined,
				},
				props: {
          locales: allLocalesPerPost[slug].filter((locale)=>locale !== fallbackLanguage),
					post,
				},
			};
		});

	const params = [...allPaths, ...fallbackPaths];
	return params;
}

interface Props {
	post: CollectionEntry<"post">;
  locales: string[];
}

const { post, locales  } = Astro.props;
const { Content } = await post.render();
---

<PostLayout post={post} locales={locales}>
	<Content />
</PostLayout>
